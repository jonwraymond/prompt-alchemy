{"prompts":[{"id":"3d6b8e39-a1cb-440c-8cca-ce116fd20a48","content":"Here’s a ready‐to‐use, well‐structured prompt that you can give to anyone (or any AI) who needs to “Write a test function.” It extracts the core intentions, spells out all requirements, flags ambiguities, and organizes everything into clear, actionable components.\n\nPrompt Start\n\n1. Task  \n   • Write one or more automated unit‐test functions to verify the correctness of a target function or method.\n\n2. Context \u0026 Background  \n   • Briefly describe what the target function does, where it lives, and why it matters.  \n   • Example: “The function `calculate_tax(income: float) -\u003e float` lives in `finance/tax.py` and must compute income tax according to the 2024 tiered schedule.”\n\n3. Objectives  \n   • Validate that the target function returns correct values for normal inputs.  \n   • Confirm proper error handling (e.g. invalid types, out‐of‐range values).  \n   • Cover edge cases (zero, negative, boundary tiers).  \n   • Ensure no unintended side effects.\n\n4. Requirements  \n   a. Language \u0026 Framework  \n     – Specify the programming language (e.g. Python 3.9+).  \n     – Specify the test framework (e.g. pytest, unittest, Jest, JUnit).  \n   b. Test Cases  \n     – At least 5 distinct cases:  \n       • Typical inputs  \n       • Boundary/edge cases  \n       • Invalid or exceptional inputs  \n     – Use descriptive names for each test.  \n   c. Assertions  \n     – Use the framework’s built-in assertion methods (e.g. `assertEqual`, `assertRaises`).  \n     – Verify both return values and any raised exceptions.  \n   d. Code Coverage  \n     – Aim for ≥ 90% coverage of the target function’s lines/branches.\n\n5. Constraints  \n   • Follow the project’s coding style (e.g. PEP8 for Python, Google Style for JavaScript).  \n   • Do not import any libraries beyond the chosen test framework (unless already in project dependencies).  \n   • Tests must run in under 1 second on average.\n\n6. Deliverables  \n   • A file named `test_\u003cmodule\u003e.py` or `\u003cmodule\u003e.test.js` containing:  \n     – One test class or module grouping all tests.  \n     – Individual test functions/methods with clear, self-documenting names.  \n     – Comments or docstrings explaining each test’s purpose.  \n   • Instructions (in comments or a separate README) on how to run the tests:  \n     e.g. `pytest tests/` or `npm test`.\n\n7. Clarifying Questions (to resolve ambiguity)  \n   • What is the exact name and signature of the function to test?  \n   • Where should the test file live (path within the repository)?  \n   • Are there any special environment requirements (mocking, fixtures)?  \n   • Should the tests integrate with CI (e.g. GitHub Actions) or run locally only?\n\nPrompt End\n\n—  \nUse the above structure to ensure the test function you write fully meets the user’s intentions, covers all specified cases, and adheres to the project’s standards.","phase":"prima-materia","provider":"openai","model":"o4-mini","temperature":0.7,"max_tokens":2000,"actual_tokens":1457,"tags":[],"source_type":"generated","relevance_score":1,"usage_count":0,"generation_count":1,"original_input":"Write a test function","generation_request":{"input":"Write a test function","phases":["prima-materia","solutio","coagulatio"],"count":1,"providers":{"coagulatio":"openai","prima-materia":"openai","solutio":"openai"},"temperature":0.7,"max_tokens":2000,"tags":[],"context":[],"SessionID":"532f4e14-d2e1-47e8-8afe-8f9da86345a2"},"generation_context":["phase=prima-materia","provider=openai","template=prima_materia","processing_time=12926ms"],"persona_used":"code","created_at":"2025-07-22T21:42:43.43314543Z","updated_at":"2025-07-22T21:43:12.429821513Z","embedding_model":"text-embedding-3-small","embedding_provider":"openai","model_metadata":{"id":"6c8441ba-932e-4053-b9e2-078494706567","prompt_id":"3d6b8e39-a1cb-440c-8cca-ce116fd20a48","generation_model":"o4-mini","generation_provider":"openai","embedding_model":"text-embedding-3-small","embedding_provider":"openai","processing_time":12926,"input_tokens":140,"output_tokens":1457,"total_tokens":1457,"cost":0.00021855,"created_at":"2025-07-22T21:42:43.665550139Z"},"session_id":"532f4e14-d2e1-47e8-8afe-8f9da86345a2"},{"id":"a0518451-3c8e-42be-acbb-85969910b131","content":"Here’s a friendlier, more engaging prompt you can hand off to anyone (or any AI) who needs to write automated unit tests. It covers every step—from understanding the function to testing edge cases—while keeping things clear and concise.\n\n---\n\n**1. What You’re Doing**  \nYou’ll write one or more automated unit‐test functions that verify a specific target function or method works exactly as it should.\n\n**2. Get to Know the Function**  \nBefore you dive in, tell us:\n- The function’s name and signature  \n- Where it lives in the codebase (e.g. `finance/tax.py`)  \n- Why it matters  \nExample:  \n“The function `calculate_tax(income: float) -\u003e float` lives in `finance/tax.py` and calculates income tax using the 2024 tiered schedule.”\n\n**3. Your Testing Goals**  \nMake sure your tests:\n- Produce the correct output for typical inputs  \n- Handle errors cleanly (wrong types, out‐of‐range values)  \n- Cover edge and boundary cases (zero, negatives, tier boundaries)  \n- Don’t introduce any side effects\n\n**4. Essential Requirements**  \na. Language \u0026 Framework  \n   • Choose a programming language (e.g. Python 3.9+)  \n   • Pick a test runner (pytest, unittest, Jest, JUnit, etc.)  \n\nb. Test Cases  \n   • Write at least five distinct cases:  \n     – Typical inputs  \n     – Edge/boundary values  \n     – Invalid or exceptional inputs  \n   • Give each test a clear, descriptive name  \n\nc. Assertions  \n   • Use your framework’s built-in assertions (`assertEqual`, `assertRaises`, etc.)  \n   • Check both return values and any expected exceptions  \n\nd. Code Coverage  \n   • Aim for at least 90% coverage of the function’s lines and branches  \n\n**5. Constraints \u0026 Style**  \n- Follow the project’s coding conventions (PEP8 for Python, Google Style for JS, etc.)  \n- Don’t import anything beyond the chosen test framework (unless it’s already a dependency)  \n- Keep the tests fast—under 1 second on average\n\n**6. Deliverables**  \nProvide a single test file named either `test_\u003cmodule\u003e.py` or `\u003cmodule\u003e.test.js` that includes:  \n- One test class or module grouping all your tests  \n- Individual test functions/methods with self‐documenting names  \n- Comments or docstrings explaining each test’s intent  \n\nAlso, include brief instructions (in a comment block or a small README) showing how to run the suite—e.g. `pytest tests/` or `npm test`.\n\n**7. Questions to Clarify**  \nBefore you start, you might ask:  \n- What is the exact function name and signature?  \n- Where should the test file live in the repo?  \n- Are there any special setup requirements (mocks, fixtures, environment variables)?  \n- Should these tests be wired into CI (e.g. GitHub Actions), or will they run locally only?\n\nUse this template as your checklist to ensure your tests are thorough, maintainable, and aligned with the project’s standards. Happy testing!","phase":"solutio","provider":"openai","model":"o4-mini","temperature":0.7,"max_tokens":2000,"actual_tokens":2428,"tags":[],"source_type":"generated","relevance_score":1,"usage_count":0,"generation_count":1,"original_input":"Write a test function","generation_request":{"input":"Write a test function","phases":["prima-materia","solutio","coagulatio"],"count":1,"providers":{"coagulatio":"openai","prima-materia":"openai","solutio":"openai"},"temperature":0.7,"max_tokens":2000,"tags":[],"context":[],"SessionID":"532f4e14-d2e1-47e8-8afe-8f9da86345a2"},"generation_context":["phase=solutio","provider=openai","template=solutio","processing_time=17337ms"],"persona_used":"code","created_at":"2025-07-22T21:43:01.003645466Z","updated_at":"2025-07-22T21:43:12.437639013Z","embedding_model":"text-embedding-3-small","embedding_provider":"openai","model_metadata":{"id":"d29b5a23-8901-4fec-95c0-43b6adb6a046","prompt_id":"a0518451-3c8e-42be-acbb-85969910b131","generation_model":"o4-mini","generation_provider":"openai","embedding_model":"text-embedding-3-small","embedding_provider":"openai","processing_time":17337,"input_tokens":864,"output_tokens":2428,"total_tokens":2428,"cost":0.00036419999999999996,"created_at":"2025-07-22T21:43:01.397133258Z"},"session_id":"532f4e14-d2e1-47e8-8afe-8f9da86345a2"},{"id":"30652ec4-ab84-403a-b4cb-390cc62f450c","content":"Write unit tests for a specified function, covering every normal, edge-case and error scenario. Use this checklist:\n\n1. Confirm the target  \n   • Function name, signature and file path (e.g. `calculate_tax(income: float) -\u003e float` in `finance/tax.py`)  \n   • Purpose and business rules  \n\n2. Environment  \n   • Language (e.g. Python 3.9+, Node 14+)  \n   • Test framework (pytest, unittest, Jest, JUnit, etc.)  \n\n3. Test suite structure  \n   • Single test file: `test_\u003cmodule\u003e.py` or `\u003cmodule\u003e.test.js`  \n   • One test class or module grouping all tests  \n   • At least five tests:  \n     – Typical inputs  \n     – Edge/boundary values  \n     – Invalid inputs or exceptions  \n   • Descriptive test names  \n\n4. Assertions \u0026 coverage  \n   • Use built-in assertions (`assertEqual`, `assertThrows`/`assertRaises`, etc.)  \n   • Verify return values and expected errors  \n   • Target ≥ 90% line and branch coverage  \n\n5. Style \u0026 performance  \n   • Follow project conventions (PEP8, Google JS, etc.)  \n   • No imports beyond the chosen framework or existing deps  \n   • Tests must run in under 1 s on average  \n\n6. Deliverables  \n   • The test file with self-documenting code and optional docstrings/comments  \n   • A brief run-instructions block or README snippet (e.g. `pytest tests/`, `npm test`)  \n\n7. Clarify before you start  \n   • Exact function signature and location  \n   • Desired test file path in the repo  \n   • Any setup requirements (mocks, fixtures, env vars)  \n   • CI integration needs (GitHub Actions, etc.)  \n\nUse this as your guide to produce clear, maintainable, high-coverage unit tests.","phase":"coagulatio","provider":"openai","model":"o4-mini","temperature":0.7,"max_tokens":2000,"actual_tokens":1663,"tags":[],"source_type":"generated","relevance_score":1,"usage_count":0,"generation_count":1,"original_input":"Write a test function","generation_request":{"input":"Write a test function","phases":["prima-materia","solutio","coagulatio"],"count":1,"providers":{"coagulatio":"openai","prima-materia":"openai","solutio":"openai"},"temperature":0.7,"max_tokens":2000,"tags":[],"context":[],"SessionID":"532f4e14-d2e1-47e8-8afe-8f9da86345a2"},"generation_context":["phase=coagulatio","provider=openai","template=coagulatio","processing_time=8903ms"],"persona_used":"code","created_at":"2025-07-22T21:43:10.301096887Z","updated_at":"2025-07-22T21:43:12.444280305Z","embedding_model":"text-embedding-3-small","embedding_provider":"openai","model_metadata":{"id":"539eccb8-c14b-4565-a414-59994a1d2dc8","prompt_id":"30652ec4-ab84-403a-b4cb-390cc62f450c","generation_model":"o4-mini","generation_provider":"openai","embedding_model":"text-embedding-3-small","embedding_provider":"openai","processing_time":8903,"input_tokens":860,"output_tokens":1663,"total_tokens":1663,"cost":0.00024944999999999996,"created_at":"2025-07-22T21:43:10.712818512Z"},"session_id":"532f4e14-d2e1-47e8-8afe-8f9da86345a2"}],"rankings":[{"Prompt":{"id":"30652ec4-ab84-403a-b4cb-390cc62f450c","content":"Write unit tests for a specified function, covering every normal, edge-case and error scenario. Use this checklist:\n\n1. Confirm the target  \n   • Function name, signature and file path (e.g. `calculate_tax(income: float) -\u003e float` in `finance/tax.py`)  \n   • Purpose and business rules  \n\n2. Environment  \n   • Language (e.g. Python 3.9+, Node 14+)  \n   • Test framework (pytest, unittest, Jest, JUnit, etc.)  \n\n3. Test suite structure  \n   • Single test file: `test_\u003cmodule\u003e.py` or `\u003cmodule\u003e.test.js`  \n   • One test class or module grouping all tests  \n   • At least five tests:  \n     – Typical inputs  \n     – Edge/boundary values  \n     – Invalid inputs or exceptions  \n   • Descriptive test names  \n\n4. Assertions \u0026 coverage  \n   • Use built-in assertions (`assertEqual`, `assertThrows`/`assertRaises`, etc.)  \n   • Verify return values and expected errors  \n   • Target ≥ 90% line and branch coverage  \n\n5. Style \u0026 performance  \n   • Follow project conventions (PEP8, Google JS, etc.)  \n   • No imports beyond the chosen framework or existing deps  \n   • Tests must run in under 1 s on average  \n\n6. Deliverables  \n   • The test file with self-documenting code and optional docstrings/comments  \n   • A brief run-instructions block or README snippet (e.g. `pytest tests/`, `npm test`)  \n\n7. Clarify before you start  \n   • Exact function signature and location  \n   • Desired test file path in the repo  \n   • Any setup requirements (mocks, fixtures, env vars)  \n   • CI integration needs (GitHub Actions, etc.)  \n\nUse this as your guide to produce clear, maintainable, high-coverage unit tests.","phase":"coagulatio","provider":"openai","model":"o4-mini","temperature":0.7,"max_tokens":2000,"actual_tokens":1663,"tags":[],"source_type":"generated","relevance_score":1,"usage_count":0,"generation_count":1,"original_input":"Write a test function","generation_request":{"input":"Write a test function","phases":["prima-materia","solutio","coagulatio"],"count":1,"providers":{"coagulatio":"openai","prima-materia":"openai","solutio":"openai"},"temperature":0.7,"max_tokens":2000,"tags":[],"context":[],"SessionID":"532f4e14-d2e1-47e8-8afe-8f9da86345a2"},"generation_context":["phase=coagulatio","provider=openai","template=coagulatio","processing_time=8903ms"],"persona_used":"code","created_at":"2025-07-22T21:43:10.301096887Z","updated_at":"2025-07-22T21:43:12.444280305Z","embedding_model":"text-embedding-3-small","embedding_provider":"openai","model_metadata":{"id":"539eccb8-c14b-4565-a414-59994a1d2dc8","prompt_id":"30652ec4-ab84-403a-b4cb-390cc62f450c","generation_model":"o4-mini","generation_provider":"openai","embedding_model":"text-embedding-3-small","embedding_provider":"openai","processing_time":8903,"input_tokens":860,"output_tokens":1663,"total_tokens":1663,"cost":0.00024944999999999996,"created_at":"2025-07-22T21:43:10.712818512Z"},"session_id":"532f4e14-d2e1-47e8-8afe-8f9da86345a2"},"Score":0.7773623122233578,"TemperatureScore":1,"TokenScore":1,"HistoricalScore":0,"ContextScore":0,"EmbeddingDistance":0,"LengthScore":0.012727272727272728,"SemanticScore":0.7353904083531965},{"Prompt":{"id":"a0518451-3c8e-42be-acbb-85969910b131","content":"Here’s a friendlier, more engaging prompt you can hand off to anyone (or any AI) who needs to write automated unit tests. It covers every step—from understanding the function to testing edge cases—while keeping things clear and concise.\n\n---\n\n**1. What You’re Doing**  \nYou’ll write one or more automated unit‐test functions that verify a specific target function or method works exactly as it should.\n\n**2. Get to Know the Function**  \nBefore you dive in, tell us:\n- The function’s name and signature  \n- Where it lives in the codebase (e.g. `finance/tax.py`)  \n- Why it matters  \nExample:  \n“The function `calculate_tax(income: float) -\u003e float` lives in `finance/tax.py` and calculates income tax using the 2024 tiered schedule.”\n\n**3. Your Testing Goals**  \nMake sure your tests:\n- Produce the correct output for typical inputs  \n- Handle errors cleanly (wrong types, out‐of‐range values)  \n- Cover edge and boundary cases (zero, negatives, tier boundaries)  \n- Don’t introduce any side effects\n\n**4. Essential Requirements**  \na. Language \u0026 Framework  \n   • Choose a programming language (e.g. Python 3.9+)  \n   • Pick a test runner (pytest, unittest, Jest, JUnit, etc.)  \n\nb. Test Cases  \n   • Write at least five distinct cases:  \n     – Typical inputs  \n     – Edge/boundary values  \n     – Invalid or exceptional inputs  \n   • Give each test a clear, descriptive name  \n\nc. Assertions  \n   • Use your framework’s built-in assertions (`assertEqual`, `assertRaises`, etc.)  \n   • Check both return values and any expected exceptions  \n\nd. Code Coverage  \n   • Aim for at least 90% coverage of the function’s lines and branches  \n\n**5. Constraints \u0026 Style**  \n- Follow the project’s coding conventions (PEP8 for Python, Google Style for JS, etc.)  \n- Don’t import anything beyond the chosen test framework (unless it’s already a dependency)  \n- Keep the tests fast—under 1 second on average\n\n**6. Deliverables**  \nProvide a single test file named either `test_\u003cmodule\u003e.py` or `\u003cmodule\u003e.test.js` that includes:  \n- One test class or module grouping all your tests  \n- Individual test functions/methods with self‐documenting names  \n- Comments or docstrings explaining each test’s intent  \n\nAlso, include brief instructions (in a comment block or a small README) showing how to run the suite—e.g. `pytest tests/` or `npm test`.\n\n**7. Questions to Clarify**  \nBefore you start, you might ask:  \n- What is the exact function name and signature?  \n- Where should the test file live in the repo?  \n- Are there any special setup requirements (mocks, fixtures, environment variables)?  \n- Should these tests be wired into CI (e.g. GitHub Actions), or will they run locally only?\n\nUse this template as your checklist to ensure your tests are thorough, maintainable, and aligned with the project’s standards. Happy testing!","phase":"solutio","provider":"openai","model":"o4-mini","temperature":0.7,"max_tokens":2000,"actual_tokens":2428,"tags":[],"source_type":"generated","relevance_score":1,"usage_count":0,"generation_count":1,"original_input":"Write a test function","generation_request":{"input":"Write a test function","phases":["prima-materia","solutio","coagulatio"],"count":1,"providers":{"coagulatio":"openai","prima-materia":"openai","solutio":"openai"},"temperature":0.7,"max_tokens":2000,"tags":[],"context":[],"SessionID":"532f4e14-d2e1-47e8-8afe-8f9da86345a2"},"generation_context":["phase=solutio","provider=openai","template=solutio","processing_time=17337ms"],"persona_used":"code","created_at":"2025-07-22T21:43:01.003645466Z","updated_at":"2025-07-22T21:43:12.437639013Z","embedding_model":"text-embedding-3-small","embedding_provider":"openai","model_metadata":{"id":"d29b5a23-8901-4fec-95c0-43b6adb6a046","prompt_id":"a0518451-3c8e-42be-acbb-85969910b131","generation_model":"o4-mini","generation_provider":"openai","embedding_model":"text-embedding-3-small","embedding_provider":"openai","processing_time":17337,"input_tokens":864,"output_tokens":2428,"total_tokens":2428,"cost":0.00036419999999999996,"created_at":"2025-07-22T21:43:01.397133258Z"},"session_id":"532f4e14-d2e1-47e8-8afe-8f9da86345a2"},"Score":0.7037141038290551,"TemperatureScore":1,"TokenScore":0.6939625260235948,"HistoricalScore":0,"ContextScore":0,"EmbeddingDistance":0,"LengthScore":0.007286606523247745,"SemanticScore":0.7448337240206677},{"Prompt":{"id":"3d6b8e39-a1cb-440c-8cca-ce116fd20a48","content":"Here’s a ready‐to‐use, well‐structured prompt that you can give to anyone (or any AI) who needs to “Write a test function.” It extracts the core intentions, spells out all requirements, flags ambiguities, and organizes everything into clear, actionable components.\n\nPrompt Start\n\n1. Task  \n   • Write one or more automated unit‐test functions to verify the correctness of a target function or method.\n\n2. Context \u0026 Background  \n   • Briefly describe what the target function does, where it lives, and why it matters.  \n   • Example: “The function `calculate_tax(income: float) -\u003e float` lives in `finance/tax.py` and must compute income tax according to the 2024 tiered schedule.”\n\n3. Objectives  \n   • Validate that the target function returns correct values for normal inputs.  \n   • Confirm proper error handling (e.g. invalid types, out‐of‐range values).  \n   • Cover edge cases (zero, negative, boundary tiers).  \n   • Ensure no unintended side effects.\n\n4. Requirements  \n   a. Language \u0026 Framework  \n     – Specify the programming language (e.g. Python 3.9+).  \n     – Specify the test framework (e.g. pytest, unittest, Jest, JUnit).  \n   b. Test Cases  \n     – At least 5 distinct cases:  \n       • Typical inputs  \n       • Boundary/edge cases  \n       • Invalid or exceptional inputs  \n     – Use descriptive names for each test.  \n   c. Assertions  \n     – Use the framework’s built-in assertion methods (e.g. `assertEqual`, `assertRaises`).  \n     – Verify both return values and any raised exceptions.  \n   d. Code Coverage  \n     – Aim for ≥ 90% coverage of the target function’s lines/branches.\n\n5. Constraints  \n   • Follow the project’s coding style (e.g. PEP8 for Python, Google Style for JavaScript).  \n   • Do not import any libraries beyond the chosen test framework (unless already in project dependencies).  \n   • Tests must run in under 1 second on average.\n\n6. Deliverables  \n   • A file named `test_\u003cmodule\u003e.py` or `\u003cmodule\u003e.test.js` containing:  \n     – One test class or module grouping all tests.  \n     – Individual test functions/methods with clear, self-documenting names.  \n     – Comments or docstrings explaining each test’s purpose.  \n   • Instructions (in comments or a separate README) on how to run the tests:  \n     e.g. `pytest tests/` or `npm test`.\n\n7. Clarifying Questions (to resolve ambiguity)  \n   • What is the exact name and signature of the function to test?  \n   • Where should the test file live (path within the repository)?  \n   • Are there any special environment requirements (mocking, fixtures)?  \n   • Should the tests integrate with CI (e.g. GitHub Actions) or run locally only?\n\nPrompt End\n\n—  \nUse the above structure to ensure the test function you write fully meets the user’s intentions, covers all specified cases, and adheres to the project’s standards.","phase":"prima-materia","provider":"openai","model":"o4-mini","temperature":0.7,"max_tokens":2000,"actual_tokens":1457,"tags":[],"source_type":"generated","relevance_score":1,"usage_count":0,"generation_count":1,"original_input":"Write a test function","generation_request":{"input":"Write a test function","phases":["prima-materia","solutio","coagulatio"],"count":1,"providers":{"coagulatio":"openai","prima-materia":"openai","solutio":"openai"},"temperature":0.7,"max_tokens":2000,"tags":[],"context":[],"SessionID":"532f4e14-d2e1-47e8-8afe-8f9da86345a2"},"generation_context":["phase=prima-materia","provider=openai","template=prima_materia","processing_time=12926ms"],"persona_used":"code","created_at":"2025-07-22T21:42:43.43314543Z","updated_at":"2025-07-22T21:43:12.429821513Z","embedding_model":"text-embedding-3-small","embedding_provider":"openai","model_metadata":{"id":"6c8441ba-932e-4053-b9e2-078494706567","prompt_id":"3d6b8e39-a1cb-440c-8cca-ce116fd20a48","generation_model":"o4-mini","generation_provider":"openai","embedding_model":"text-embedding-3-small","embedding_provider":"openai","processing_time":12926,"input_tokens":140,"output_tokens":1457,"total_tokens":1457,"cost":0.00021855,"created_at":"2025-07-22T21:42:43.665550139Z"},"session_id":"532f4e14-d2e1-47e8-8afe-8f9da86345a2"},"Score":0.7032980626892074,"TemperatureScore":1,"TokenScore":0.6861063464837049,"HistoricalScore":0,"ContextScore":0,"EmbeddingDistance":0,"LengthScore":0.007204116638078903,"SemanticScore":0.7489892306360565}],"selected":{"id":"30652ec4-ab84-403a-b4cb-390cc62f450c","content":"Write unit tests for a specified function, covering every normal, edge-case and error scenario. Use this checklist:\n\n1. Confirm the target  \n   • Function name, signature and file path (e.g. `calculate_tax(income: float) -\u003e float` in `finance/tax.py`)  \n   • Purpose and business rules  \n\n2. Environment  \n   • Language (e.g. Python 3.9+, Node 14+)  \n   • Test framework (pytest, unittest, Jest, JUnit, etc.)  \n\n3. Test suite structure  \n   • Single test file: `test_\u003cmodule\u003e.py` or `\u003cmodule\u003e.test.js`  \n   • One test class or module grouping all tests  \n   • At least five tests:  \n     – Typical inputs  \n     – Edge/boundary values  \n     – Invalid inputs or exceptions  \n   • Descriptive test names  \n\n4. Assertions \u0026 coverage  \n   • Use built-in assertions (`assertEqual`, `assertThrows`/`assertRaises`, etc.)  \n   • Verify return values and expected errors  \n   • Target ≥ 90% line and branch coverage  \n\n5. Style \u0026 performance  \n   • Follow project conventions (PEP8, Google JS, etc.)  \n   • No imports beyond the chosen framework or existing deps  \n   • Tests must run in under 1 s on average  \n\n6. Deliverables  \n   • The test file with self-documenting code and optional docstrings/comments  \n   • A brief run-instructions block or README snippet (e.g. `pytest tests/`, `npm test`)  \n\n7. Clarify before you start  \n   • Exact function signature and location  \n   • Desired test file path in the repo  \n   • Any setup requirements (mocks, fixtures, env vars)  \n   • CI integration needs (GitHub Actions, etc.)  \n\nUse this as your guide to produce clear, maintainable, high-coverage unit tests.","phase":"coagulatio","provider":"openai","model":"o4-mini","temperature":0.7,"max_tokens":2000,"actual_tokens":1663,"tags":[],"source_type":"generated","relevance_score":1,"usage_count":0,"generation_count":1,"original_input":"Write a test function","generation_request":{"input":"Write a test function","phases":["prima-materia","solutio","coagulatio"],"count":1,"providers":{"coagulatio":"openai","prima-materia":"openai","solutio":"openai"},"temperature":0.7,"max_tokens":2000,"tags":[],"context":[],"SessionID":"532f4e14-d2e1-47e8-8afe-8f9da86345a2"},"generation_context":["phase=coagulatio","provider=openai","template=coagulatio","processing_time=8903ms"],"persona_used":"code","created_at":"2025-07-22T21:43:10.301096887Z","updated_at":"2025-07-22T21:43:12.444280305Z","embedding_model":"text-embedding-3-small","embedding_provider":"openai","model_metadata":{"id":"539eccb8-c14b-4565-a414-59994a1d2dc8","prompt_id":"30652ec4-ab84-403a-b4cb-390cc62f450c","generation_model":"o4-mini","generation_provider":"openai","embedding_model":"text-embedding-3-small","embedding_provider":"openai","processing_time":8903,"input_tokens":860,"output_tokens":1663,"total_tokens":1663,"cost":0.00024944999999999996,"created_at":"2025-07-22T21:43:10.712818512Z"},"session_id":"532f4e14-d2e1-47e8-8afe-8f9da86345a2"},"session_id":"532f4e14-d2e1-47e8-8afe-8f9da86345a2","metadata":{"total_generated":3,"phases_timing_ms":{"total":40206},"providers_used":{"coagulatio":"openai","prima-materia":"openai","solutio":"openai"},"generated_at":"2025-07-22T21:43:12.447155596Z","request_options":{"phases":["prima-materia","solutio","coagulatio"],"count":1,"persona":"code"}}}
