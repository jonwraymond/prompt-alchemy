name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Specific test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - global_flags
          - cli_commands
          - mcp_server
      verbose:
        description: 'Enable verbose output'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  pull-requests: write
  issues: write
  security-events: write

env:
  GO_VERSION: '1.24'
  TIMEOUT: '30m'

jobs:
  # Unit tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.23', '1.24']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
    
    - name: Install dependencies
      run: make deps
    
    - name: Run unit tests
      run: make test-unit
    
    - name: Generate coverage report
      run: make coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unit
        name: unit-tests-${{ matrix.go-version }}

  # Linting and security
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Install dependencies
      run: make deps
    
    - name: Format check
      run: |
        make fmt
        if [ -n "$(git status --porcelain)" ]; then
          echo "Code is not formatted. Please run 'make fmt'"
          exit 1
        fi
    
    - name: Install golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=10m
    
    - name: Install gosec
      run: |
        curl -sfL https://raw.githubusercontent.com/securecodewarrior/gosec/master/install.sh | sh -s -- -b $(go env GOPATH)/bin latest
    
    - name: Run security scan
      run: make security

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ${{ matrix.os }}
    needs: [unit-tests, code-quality]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        test-suite: [global_flags, cli_commands, mcp_server]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-
    
    - name: Install dependencies
      run: make deps
    
    - name: Build binary
      run: make build
    
    - name: Setup test environment
      run: make test-setup
    
    - name: Run integration tests
      run: |
        if [ "${{ github.event.inputs.test_suite }}" != "all" ] && [ "${{ github.event.inputs.test_suite }}" != "${{ matrix.test-suite }}" ]; then
          echo "Skipping ${{ matrix.test-suite }} as specific suite ${{ github.event.inputs.test_suite }} was requested"
          exit 0
        fi
        
        if [ "${{ github.event.inputs.verbose }}" == "true" ]; then
          make test-suite TEST_SUITE=${{ matrix.test-suite }} --verbose
        else
          make test-suite TEST_SUITE=${{ matrix.test-suite }}
        fi
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.test-suite }}
        path: test-results/
        retention-days: 30
    
    - name: Upload test logs
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: test-logs-${{ matrix.os }}-${{ matrix.test-suite }}
        path: /tmp/prompt-alchemy-*test*/
        retention-days: 7

  # Full integration test
  full-integration:
    name: Full Integration Test
    runs-on: ubuntu-latest
    needs: [unit-tests, code-quality]
    if: github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Install dependencies
      run: make deps
    
    - name: Build binary
      run: make build
    
    - name: Setup test environment
      run: make test-setup
    
    - name: Run full test suite
      run: |
        if [ "${{ github.event.inputs.verbose }}" == "true" ]; then
          make test-integration --verbose
        else
          make test-ci
        fi
    
    - name: Generate test report
      run: make test-report
    
    - name: Upload comprehensive test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: full-test-results
        path: test-results/
        retention-days: 30

  # Performance benchmarks
  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [unit-tests]
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Install dependencies
      run: make deps
    
    - name: Run benchmarks
      run: make bench > benchmark_results.txt
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark_results.txt
        retention-days: 30

  # Cross-platform build test
  cross-platform-build:
    name: Cross-Platform Build
    runs-on: ubuntu-latest
    needs: [unit-tests, code-quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Install dependencies
      run: make deps
    
    - name: Build for multiple platforms
      run: make release
    
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-binaries
        path: bin/
        retention-days: 30

  # Docker test
  docker-test:
    name: Docker Test
    runs-on: ubuntu-latest
    needs: [unit-tests, code-quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: make docker-build
    
    - name: Run tests in Docker
      run: make docker-test

  # Notification and reporting
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, code-quality, integration-tests, full-integration, benchmarks, cross-platform-build, docker-test]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Generate summary report
      run: |
        echo "# Test Summary Report" > test_summary.md
        echo "" >> test_summary.md
        echo "## Job Results" >> test_summary.md
        echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> test_summary.md
        echo "- Code Quality: ${{ needs.code-quality.result }}" >> test_summary.md
        echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> test_summary.md
        echo "- Full Integration: ${{ needs.full-integration.result }}" >> test_summary.md
        echo "- Benchmarks: ${{ needs.benchmarks.result }}" >> test_summary.md
        echo "- Cross-Platform Build: ${{ needs.cross-platform-build.result }}" >> test_summary.md
        echo "- Docker Test: ${{ needs.docker-test.result }}" >> test_summary.md
        echo "" >> test_summary.md
        echo "## Artifacts" >> test_summary.md
        echo "The following artifacts were generated:" >> test_summary.md
        ls -la . >> test_summary.md
    
    - name: Upload summary
      uses: actions/upload-artifact@v4
      with:
        name: test-summary
        path: test_summary.md
        retention-days: 30
    
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('test_summary.md', 'utf8');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });
    
    - name: Notify on failure
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Test Suite Failed',
            body: `Test suite failed for commit ${context.sha}. Please check the workflow run for details.`,
            labels: ['bug', 'testing']
          });

  # Security scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [unit-tests, code-quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: go
    
    - name: Run CodeQL analysis
      uses: github/codeql-action/analyze@v2 